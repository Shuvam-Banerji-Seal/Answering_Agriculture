"""
IndicAgri Frontend Server
FastAPI server to serve frontend and connect to backend RAG system
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import logging
import asyncio
import json
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="IndicAgri Frontend", description="Agricultural AI Assistant Frontend")

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Templates
templates = Jinja2Templates(directory="templates")

# Request/Response Models
class QueryRequest(BaseModel):
    query: str
    input_type: str = "text"
    language: str = "hi"
    user_location: Optional[str] = None

class Source(BaseModel):
    title: str
    url: str
    relevance: float

class QueryResponse(BaseModel):
    answer: str
    sources: List[Source] = []
    confidence: float
    processing_time: Optional[float] = None

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """Serve the main application page"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/api/v1/query", response_model=QueryResponse)
async def process_query(query_request: QueryRequest):
    """
    Process agricultural query using the backend RAG system
    
    This endpoint will be connected to your actual RAG pipeline
    from the sub_query_generation and embedding_generator modules
    """
    try:
        logger.info(f"Processing query: {query_request.query[:100]}...")
        
        # TODO: Integrate with your actual RAG system
        # from sub_query_generation.main import process_agricultural_query
        # result = await process_agricultural_query(query_request.query)
        
        # For now, return mock response based on query content
        response = await get_mock_response(query_request)
        
        return response
        
    except Exception as e:
        logger.error(f"Error processing query: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def get_mock_response(query_request: QueryRequest) -> QueryResponse:
    """
    Mock response generator for testing
    Replace this with your actual RAG system integration
    """
    query = query_request.query.lower()
    
    # Simulate processing time
    await asyncio.sleep(1)
    
    if 'рдореМрд╕рдо' in query or 'weather' in query:
        return QueryResponse(
            answer="""рдЖрдЬ рдХрд╛ рдореМрд╕рдо рд╕рд╛рдл рд╣реИред рддрд╛рдкрдорд╛рди 25┬░C рд╣реИред рдЕрдЧрд▓реЗ 3 рджрд┐рди рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред 
            
рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣:
тАв рдЕрдкрдиреА рдлрд╕рд▓ рдХреЛ рдмрд╛рд░рд┐рд╢ рд╕реЗ рдмрдЪрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЙрдЪрд┐рдд рд╡реНрдпрд╡рд╕реНрдерд╛ рдХрд░реЗрдВ
тАв рд╕рд┐рдВрдЪрд╛рдИ рдХрдо рдХрд░реЗрдВ рдХреНрдпреЛрдВрдХрд┐ рдмрд╛рд░рд┐рд╢ рд╣реЛрдиреЗ рд╡рд╛рд▓реА рд╣реИ
тАв рдЦрд╛рдж рдбрд╛рд▓рдиреЗ рд╕реЗ рдмрдЪреЗрдВ, рдмрд╛рд░рд┐рд╢ рдХреЗ рдмрд╛рдж рдбрд╛рд▓реЗрдВ""",
            sources=[
                Source(title="IMD Weather Report", url="#", relevance=0.95),
                Source(title="Agricultural Weather Advisory", url="#", relevance=0.88)
            ],
            confidence=0.92,
            processing_time=1.2
        )
    
    elif 'рдзрд╛рди' in query or 'rice' in query:
        return QueryResponse(
            answer="""рдзрд╛рди рдХреА рдлрд╕рд▓ рдореЗрдВ рдкреАрд▓реЗ рдкрддреНрддреЗ рдХреА рд╕рдорд╕реНрдпрд╛ рдХреЗ рдореБрдЦреНрдп рдХрд╛рд░рдг:

1. **рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдХрдореА**: рд╕рдмрд╕реЗ рдЖрдо рдХрд╛рд░рдг
   тАв рд╕рдорд╛рдзрд╛рди: 25-30 рдХрд┐рд▓реЛ рдпреВрд░рд┐рдпрд╛ рдкреНрд░рддрд┐ рдПрдХрдбрд╝

2. **рдкрд╛рдиреА рдХреА рдЕрдзрд┐рдХрддрд╛**: рдЬрд▓рднрд░рд╛рд╡ рдХреЗ рдХрд╛рд░рдг
   тАв рд╕рдорд╛рдзрд╛рди: рд╕рд┐рдВрдЪрд╛рдИ рдореЗрдВ рд╕рдВрдпрдо, рдбреНрд░реЗрдиреЗрдЬ рдмрдирд╛рдПрдВ

3. **рдЖрдпрд░рди рдХреА рдХрдореА**: рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ рдХреНрд╖рд╛рд░реАрдп рдорд┐рдЯреНрдЯреА рдореЗрдВ
   тАв рд╕рдорд╛рдзрд╛рди: рдЖрдпрд░рди рд╕рд▓реНрдлреЗрдЯ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡

4. **рд░реЛрдЧ**: рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рд▓реАрдл рдмреНрд▓рд╛рдЗрдЯ
   тАв рд╕рдорд╛рдзрд╛рди: рдХреЙрдкрд░-рдЖрдзрд╛рд░рд┐рдд рджрд╡рд╛ рдХрд╛ рдкреНрд░рдпреЛрдЧ""",
            sources=[
                Source(title="ICAR Rice Cultivation Guide", url="#", relevance=0.94),
                Source(title="Plant Pathology Research", url="#", relevance=0.87)
            ],
            confidence=0.96,
            processing_time=1.5
        )
    
    elif 'рдХреАрдордд' in query or 'price' in query:
        return QueryResponse(
            answer="""**рдЖрдЬ рдХреЗ рдордВрдбреА рднрд╛рд╡ (тВ╣ рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓):**

ЁЯУИ **рдЕрдирд╛рдЬ:**
тАв рдЧреЗрд╣реВрдВ: тВ╣2,150 (тЖСтВ╣50)
тАв рдзрд╛рди: тВ╣1,980 (тЖСтВ╣30)
тАв рдордХреНрдХрд╛: тВ╣1,850 (тЖУтВ╣20)

ЁЯМ▒ **рджрд╛рд▓реЗрдВ:**
тАв рдЪрдирд╛: тВ╣5,200 (тЖСтВ╣100)
тАв рдореВрдВрдЧ: тВ╣7,500 (тЖСтВ╣200)
тАв рдЕрд░рд╣рд░: тВ╣6,800 (тЖСтВ╣150)

ЁЯем **рд╕рдмреНрдЬрд┐рдпрд╛рдВ:**
тАв рдкреНрдпрд╛рдЬ: тВ╣3,500 (тЖСтВ╣300)
тАв рдЖрд▓реВ: тВ╣1,200 (тЖУтВ╣100)
тАв рдЯрдорд╛рдЯрд░: тВ╣4,000 (тЖСтВ╣500)

**рдмрд╛рдЬрд╛рд░ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:** рдЕрдЧрд▓реЗ рд╕рдкреНрддрд╛рд╣ рджрд╛рд▓реЛрдВ рдХреА рдХреАрдорддреЛрдВ рдореЗрдВ рдФрд░ рд╡реГрджреНрдзрд┐ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред""",
            sources=[
                Source(title="APMC Market Prices", url="#", relevance=0.98),
                Source(title="Agricultural Market Intelligence", url="#", relevance=0.91)
            ],
            confidence=0.95,
            processing_time=0.8
        )
    
    elif 'рдпреЛрдЬрдирд╛' in query or 'scheme' in query:
        return QueryResponse(
            answer="""**рдкреНрд░рдореБрдЦ рдХреГрд╖рд┐ рдпреЛрдЬрдирд╛рдПрдВ 2025:**

ЁЯОп **PM-KISAN:**
тАв тВ╣6,000 рдкреНрд░рддрд┐ рд╡рд░реНрд╖ (тВ╣2,000 рдХреА 3 рдХрд┐рд╕реНрддреЗрдВ)
тАв рд╕рднреА рднреВрдорд┐рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд╛рддреНрд░
тАв рдСрдирд▓рд╛рдЗрди рдЖрд╡реЗрджрди: pmkisan.gov.in

ЁЯМ▒ **PM рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛:**
тАв рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЖрдкрджрд╛ рд╕реЗ рд╕реБрд░рдХреНрд╖рд╛
тАв рдЦрд░реАрдл: 2% рдкреНрд░реАрдорд┐рдпрдо, рд░рдмреА: 1.5%
тАв 72 рдШрдВрдЯреЗ рдореЗрдВ рдиреБрдХрд╕рд╛рди рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ

ЁЯТз **рдкреНрд░рдзрд╛рдирдордВрддреНрд░реА рдХреГрд╖рд┐ рд╕рд┐рдВрдЪрд╛рдИ рдпреЛрдЬрдирд╛:**
тАв рдбреНрд░рд┐рдк рдФрд░ рд╕реНрдкреНрд░рд┐рдВрдХрд▓рд░ рд╕рд┐рд╕реНрдЯрдо рдкрд░ 55% рд╕рдмреНрд╕рд┐рдбреА
тАв SC/ST рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП 75% рд╕рдмреНрд╕рд┐рдбреА

ЁЯЪЬ **рдХреГрд╖рд┐ рдпрдВрддреНрд░реАрдХрд░рдг:**
тАв рдЯреНрд░реИрдХреНрдЯрд░ рдЦрд░реАрджрдиреЗ рдкрд░ 25-50% рд╕рдмреНрд╕рд┐рдбреА
тАв рдХрд╕реНрдЯрдо рд╣рд╛рдпрд░рд┐рдВрдЧ рд╕реЗрдВрдЯрд░ рд╕реНрдерд╛рдкрдирд╛""",
            sources=[
                Source(title="Ministry of Agriculture & Farmers Welfare", url="#", relevance=0.97),
                Source(title="PM-KISAN Official Portal", url="#", relevance=0.93)
            ],
            confidence=0.94,
            processing_time=1.1
        )
    
    else:
        return QueryResponse(
            answer=f"""рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди "{query_request.query}" рдмрд╣реБрдд рджрд┐рд▓рдЪрд╕реНрдк рд╣реИред 

рд╣рдорд╛рд░реА AI рдкреНрд░рдгрд╛рд▓реА рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рд╡рд┐рд╢реЗрд╖ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХрддреА рд╣реИ:

ЁЯМ╛ **рдлрд╕рд▓ рд╕рдВрдмрдВрдзреА:** рд░реЛрдЧ, рдХреАрдЯ, рдЦрд╛рдж, рдмреБрдЖрдИ
ЁЯУК **рдмрд╛рдЬрд╛рд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА:** рдХреАрдорддреЗрдВ, рдорд╛рдВрдЧ, рднрдВрдбрд╛рд░рдг
ЁЯМдя╕П **рдореМрд╕рдо рд╕рд▓рд╛рд╣:** рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди, рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣  
ЁЯПЫя╕П **рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ:** рд╕рдмреНрд╕рд┐рдбреА, рдмреАрдорд╛, рд▓реЛрди
ЁЯЪЬ **рдХреГрд╖рд┐ рддрдХрдиреАрдХ:** рдпрдВрддреНрд░, рдирдИ рд╡рд┐рдзрд┐рдпрд╛рдВ

рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ рддрд╛рдХрд┐ рдореИрдВ рдЖрдкрдХреЛ рдмреЗрд╣рддрд░ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░ рд╕рдХреВрдВред""",
            sources=[
                Source(title="IndicAgri Knowledge Base", url="#", relevance=0.75)
            ],
            confidence=0.78,
            processing_time=0.5
        )

# Error handlers
@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    return templates.TemplateResponse("index.html", {"request": request})

@app.exception_handler(500)
async def server_error_handler(request: Request, exc: HTTPException):
    logger.error(f"Server error: {exc.detail}")
    return {"error": "Internal server error", "detail": str(exc.detail)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
