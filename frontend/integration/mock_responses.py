"""
Enhanced mock responses for development and testing
"""

from typing import Dict, List
import random

class MockResponseGenerator:
    """Generate realistic mock responses for development"""
    
    def __init__(self):
        self.response_templates = {
            "weather": self._weather_responses,
            "crop_disease": self._crop_disease_responses,
            "market_prices": self._market_price_responses,
            "government_schemes": self._scheme_responses,
            "general_agriculture": self._general_responses
        }
    
    def get_response(self, query: str, language: str = "hi") -> Dict:
        """Get appropriate mock response based on query content"""
        query_lower = query.lower()
        
        # Determine response type
        if any(word in query_lower for word in ['рдореМрд╕рдо', 'weather', 'рдмрд╛рд░рд┐рд╢', 'рддрд╛рдкрдорд╛рди']):
            return self.response_templates["weather"]()
        elif any(word in query_lower for word in ['рдзрд╛рди', 'rice', 'рдкреАрд▓реЗ рдкрддреНрддреЗ', 'рдмреАрдорд╛рд░реА', 'disease']):
            return self.response_templates["crop_disease"]()
        elif any(word in query_lower for word in ['рдХреАрдордд', 'price', 'рднрд╛рд╡', 'рдмрд╛рдЬрд╝рд╛рд░', 'market']):
            return self.response_templates["market_prices"]()
        elif any(word in query_lower for word in ['рдпреЛрдЬрдирд╛', 'scheme', 'рд╕рдмреНрд╕рд┐рдбреА', 'subsidy']):
            return self.response_templates["government_schemes"]()
        else:
            return self.response_templates["general_agriculture"]()
    
    def _weather_responses(self) -> Dict:
        """Weather-related responses"""
        responses = [
            {
                "answer": """**рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдФрд░ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣:**

ЁЯМбя╕П **рдЖрдЬ рдХрд╛ рддрд╛рдкрдорд╛рди:** 24┬░C - 32┬░C
ЁЯМзя╕П **рдмрд╛рд░рд┐рд╢ рдХреА рд╕рдВрднрд╛рд╡рдирд╛:** 65% (рдЕрдЧрд▓реЗ 48 рдШрдВрдЯреЗ рдореЗрдВ)
ЁЯТи **рд╣рд╡рд╛ рдХреА рдЧрддрд┐:** 12 рдХрд┐рдореА/рдШрдВрдЯрд╛
тШБя╕П **рдЖрд░реНрджреНрд░рддрд╛:** 70%

**ЁЯМ╛ рдХреГрд╖рд┐ рд╕реБрдЭрд╛рд╡:**
тАв рдзрд╛рди рдХреА рд░реЛрдкрд╛рдИ рдХреЗ рд▓рд┐рдП рдЙрддреНрддрдо рд╕рдордп
тАв рд╕рд┐рдВрдЪрд╛рдИ рдХрдо рдХрд░реЗрдВ - рдкреНрд░рд╛рдХреГрддрд┐рдХ рдмрд╛рд░рд┐рд╢ рдХрд╛ рдлрд╛рдпрджрд╛ рдЙрдард╛рдПрдВ  
тАв рдЦрд╛рдж рдбрд╛рд▓рдиреЗ рд╕реЗ рдмрдЪреЗрдВ, рдмрд╛рд░рд┐рд╢ рдХреЗ рдмрд╛рдж рдбрд╛рд▓реЗрдВ
тАв рд╕рдмреНрдЬрд┐рдпреЛрдВ рдореЗрдВ рдлрдлреВрдВрдж рд░реЛрдЧ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рдбреНрд░реЗрдиреЗрдЬ рдХреА рд╡реНрдпрд╡рд╕реНрдерд╛ рдХрд░реЗрдВ

тЪая╕П **рдЪреЗрддрд╛рд╡рдиреА:** рддреЗрдЬрд╝ рд╣рд╡рд╛ рдФрд░ рдУрд▓реЗ рдХреА рд╕рдВрднрд╛рд╡рдирд╛ рд╣реИред""",
                "sources": [
                    {"title": "IMD Weather Report", "relevance": 0.95},
                    {"title": "ICAR Weather Advisory", "relevance": 0.88}
                ],
                "confidence": 0.92
            }
        ]
        return random.choice(responses)
    
    def _crop_disease_responses(self) -> Dict:
        """Crop disease and management responses"""
        responses = [
            {
                "answer": """**рдзрд╛рди рдореЗрдВ рдкреАрд▓реА рдкрддреНрддреА рдХреА рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди:**

ЁЯФН **рд╕рдВрднрд╛рд╡рд┐рдд рдХрд╛рд░рдг:**

1я╕ПтГг **рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдХрдореА** (70% рдорд╛рдорд▓реЗ)
   тАв рд╕рдорд╛рдзрд╛рди: рдпреВрд░рд┐рдпрд╛ 25 рдХрд┐рд▓реЛ/рдПрдХрдбрд╝ + DAP 15 рдХрд┐рд▓реЛ

2я╕ПтГг **рдЬрдбрд╝ рд╕рдбрд╝рди рд░реЛрдЧ** (рдЬрд▓рднрд░рд╛рд╡ рд╕реЗ)
   тАв рд╕рдорд╛рдзрд╛рди: рддреБрд░рдВрдд рдкрд╛рдиреА рдирд┐рдХрд╛рд▓реЗрдВ, рдХрд╛рд░реНрдмреЗрдиреНрдбрд╛рдЬрд┐рдо рд╕реНрдкреНрд░реЗ рдХрд░реЗрдВ

3я╕ПтГг **рдЖрдпрд░рди рдХреА рдХрдореА** (рдХреНрд╖рд╛рд░реАрдп рдорд┐рдЯреНрдЯреА рдореЗрдВ)
   тАв рд╕рдорд╛рдзрд╛рди: рдЖрдпрд░рди рд╕рд▓реНрдлреЗрдЯ 3 рдЧреНрд░рд╛рдо/рд▓реАрдЯрд░ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡

4я╕ПтГг **рдмреИрдХреНрдЯреАрд░рд┐рдпрд▓ рдмреНрд▓рд╛рдЗрдЯ**
   тАв рд╕рдорд╛рдзрд╛рди: рдХреЙрдкрд░ рд╕рд▓реНрдлреЗрдЯ 2 рдЧреНрд░рд╛рдо/рд▓реАрдЯрд░ + рдЪрд┐рдкрдХрдиреЗ рд╡рд╛рд▓рд╛ рдкрджрд╛рд░реНрде

**ЁЯТК рддреБрд░рдВрдд рдЙрдкрдЪрд╛рд░:**
тЬЕ рдкреЛрдЯрд╛рд╢ 15 рдХрд┐рд▓реЛ/рдПрдХрдбрд╝ рдбрд╛рд▓реЗрдВ
тЬЕ рдЬрд┐рдВрдХ рд╕рд▓реНрдлреЗрдЯ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВ
тЬЕ рдмреАрдЬреЛрдкрдЪрд╛рд░ рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВ""",
                "sources": [
                    {"title": "ICAR Rice Disease Manual", "relevance": 0.94},
                    {"title": "Plant Pathology Guide", "relevance": 0.87}
                ],
                "confidence": 0.96
            }
        ]
        return random.choice(responses)
    
    def _market_price_responses(self) -> Dict:
        """Market price responses"""
        responses = [
            {
                "answer": """**рдЖрдЬ рдХреЗ рдордВрдбреА рднрд╛рд╡ (тВ╣/рдХреНрд╡рд┐рдВрдЯрд▓):**

ЁЯУИ **рдЕрдирд╛рдЬ рдХреА рдХреАрдорддреЗрдВ:**
тАв рдЧреЗрд╣реВрдВ: тВ╣2,180 (тЖСтВ╣30) - рдмрдврд╝рддреА рдорд╛рдВрдЧ
тАв рдзрд╛рди: тВ╣2,050 (тЖСтВ╣20) - рд╕рд░рдХрд╛рд░реА рдЦрд░реАрдж рд╢реБрд░реВ  
тАв рдордХреНрдХрд╛: тВ╣1,870 (тЖУтВ╣15) - рдЕрдзрд┐рдХ рдЖрдкреВрд░реНрддрд┐
тАв рдмрд╛рдЬрд░рд╛: тВ╣2,400 (тЖСтВ╣50) - рдирд┐рд░реНрдпрд╛рдд рдорд╛рдВрдЧ

ЁЯМ▒ **рджрд▓рд╣рди-рддрд┐рд▓рд╣рди:**
тАв рдЪрдирд╛: тВ╣5,350 (тЖСтВ╣150) - рддреНрдпреЛрд╣рд╛рд░реА рдорд╛рдВрдЧ
тАв рдореВрдВрдЧ: тВ╣7,800 (тЖСтВ╣300) - рдХрдо рдЙрддреНрдкрд╛рджрди
тАв рд╕рд░рд╕реЛрдВ: тВ╣5,200 (тЖСтВ╣100) - рддреЗрд▓ рдХреА рдорд╛рдВрдЧ

**ЁЯУК рдмрд╛рдЬрд╝рд╛рд░ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди:**
тАв рдЕрдЧрд▓реЗ 2 рд╕рдкреНрддрд╛рд╣ рдореЗрдВ рджрд╛рд▓реЛрдВ рдХреА рдХреАрдордд рдФрд░ рдмрдврд╝ рд╕рдХрддреА рд╣реИ
тАв рдЧреЗрд╣реВрдВ рдХреА рдХреАрдордд рд╕реНрдерд┐рд░ рд░рд╣рдиреЗ рдХреА рд╕рдВрднрд╛рд╡рдирд╛
тАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдУрдВ рдХрд╛ рд▓рд╛рдн рдЙрдард╛рдПрдВ

ЁЯТб **рд╕реБрдЭрд╛рд╡:** рдЪрдирд╛ рдФрд░ рдореВрдВрдЧ рдмреЗрдЪрдиреЗ рдХрд╛ рдЕрдЪреНрдЫрд╛ рд╕рдордп рд╣реИред""",
                "sources": [
                    {"title": "APMC Daily Rates", "relevance": 0.96},
                    {"title": "Agricultural Market Intelligence", "relevance": 0.89}
                ],
                "confidence": 0.93
            }
        ]
        return random.choice(responses)
    
    def _scheme_responses(self) -> Dict:
        """Government scheme responses"""
        responses = [
            {
                "answer": """**рдкреНрд░рдореБрдЦ рдХреГрд╖рд┐ рдпреЛрдЬрдирд╛рдПрдВ 2025:**

ЁЯОп **PM-KISAN рдпреЛрдЬрдирд╛:**
тАв тВ╣6,000/рд╡рд░реНрд╖ (тВ╣2,000 рдХреА 3 рдХрд┐рд╕реНрддреЗрдВ)
тАв рд╕рднреА рднреВрдорд┐рдзрд╛рд░рдХ рдХрд┐рд╕рд╛рди рдкрд╛рддреНрд░
тАв рдЖрд╡реЗрджрди: pmkisan.gov.in рдкрд░ рдСрдирд▓рд╛рдЗрди

ЁЯМ▒ **рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛:**
тАв рдЦрд░реАрдл: 2% рдкреНрд░реАрдорд┐рдпрдо, рд░рдмреА: 1.5%  
тАв рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЖрдкрджрд╛ рдХреА 100% рднрд░рдкрд╛рдИ
тАв 72 рдШрдВрдЯреЗ рдореЗрдВ рдиреБрдХрд╕рд╛рди рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдЬрд░реВрд░реА

ЁЯТз **рд╕рд┐рдВрдЪрд╛рдИ рдпреЛрдЬрдирд╛:**
тАв рдбреНрд░рд┐рдк рд╕рд┐рд╕реНрдЯрдо рдкрд░ 55% рд╕рдмреНрд╕рд┐рдбреА
тАв SC/ST рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП 75% рддрдХ
тАв рдЖрд╡реЗрджрди рдХреГрд╖рд┐ рд╡рд┐рднрд╛рдЧ рдореЗрдВ

ЁЯЪЬ **рдХреГрд╖рд┐ рдпрдВрддреНрд░реАрдХрд░рдг:**
тАв рдЯреНрд░реИрдХреНрдЯрд░ рдкрд░ 25% рд╕рдмреНрд╕рд┐рдбреА  
тАв рдереНрд░реЗрд╢рд░, рд╣рд╛рд░реНрд╡реЗрд╕реНрдЯрд░ рдкрд░ 40%
тАв рдХрд╕реНрдЯрдо рд╣рд╛рдпрд░рд┐рдВрдЧ рд╕реЗрдВрдЯрд░ рдЕрдиреБрджрд╛рди

ЁЯУЛ **рдЖрд╡реЗрджрди рдкреНрд░рдХреНрд░рд┐рдпрд╛:**
1. рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб + рднреВрдорд┐ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рддреИрдпрд╛рд░ рд░рдЦреЗрдВ
2. рдирдЬрджреАрдХреА рдХреГрд╖рд┐ рд╕реЗрд╡рд╛ рдХреЗрдВрджреНрд░ рдЬрд╛рдПрдВ  
3. рдСрдирд▓рд╛рдЗрди рдлреЙрд░реНрдо рднрд░реЗрдВ рдФрд░ рдЯреНрд░реИрдХ рдХрд░реЗрдВ""",
                "sources": [
                    {"title": "Ministry of Agriculture", "relevance": 0.97},
                    {"title": "DBT Agriculture Portal", "relevance": 0.91}
                ],
                "confidence": 0.95
            }
        ]
        return random.choice(responses)
    
    def _general_responses(self) -> Dict:
        """General agricultural responses"""
        return {
            "answer": """**IndicAgri рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯМ╛**

рдЖрдк рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:

ЁЯМ▒ **рдлрд╕рд▓ рдкреНрд░рдмрдВрдзрди:**
тАв рдмреБрдЖрдИ, рд╕рд┐рдВрдЪрд╛рдИ, рдХрдЯрд╛рдИ рдХрд╛ рд╕рдордп
тАв рдмреАрдЬ рдЪрдпрди рдФрд░ рдХрд┐рд╕реНрдо рд╕реБрдЭрд╛рд╡
тАв рдЦрд╛рдж-рдЙрд░реНрд╡рд░рдХ рдХреА рдорд╛рддреНрд░рд╛ рдФрд░ рд╕рдордп

ЁЯРЫ **рд░реЛрдЧ-рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг:**
тАв рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдкрд╣рдЪрд╛рди
тАв рдЬреИрд╡рд┐рдХ рдФрд░ рд░рд╛рд╕рд╛рдпрдирд┐рдХ рдЙрдкрдЪрд╛рд░
тАв рд░реЛрдХрдерд╛рдо рдХреЗ рдЙрдкрд╛рдп

ЁЯМдя╕П **рдореМрд╕рдо рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣:**
тАв 7 рджрд┐рди рдХрд╛ рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди
тАв рдореМрд╕рдо рдЕрдиреБрдХреВрд▓ рдХреГрд╖рд┐ рдХреНрд░рд┐рдпрд╛рдПрдВ
тАв рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЖрдкрджрд╛ рд╕реЗ рдмрдЪрд╛рд╡

ЁЯТ░ **рдЖрд░реНрдерд┐рдХ рдЬрд╛рдирдХрд╛рд░реА:**
тАв рджреИрдирд┐рдХ рдордВрдбреА рднрд╛рд╡
тАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ рдФрд░ рд╕рдмреНрд╕рд┐рдбреА
тАв рдлрд╕рд▓ рдмреАрдорд╛ рдФрд░ рд▓реЛрди

рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВред рдореИрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ!""",
            "sources": [
                {"title": "IndicAgri Knowledge Base", "relevance": 0.78}
            ],
            "confidence": 0.80
        }
